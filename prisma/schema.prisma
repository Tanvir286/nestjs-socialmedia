generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  friends                Friendship[]    @relation("UserFriends")
  friendOf               Friendship[]    @relation("FriendOfUser")

  //reciver
  sent_notifications     Notification[] @relation("sender")
  received_notifications Notification[] @relation("receiver")
  //sender

  messages Message[] 
  conversations Participant[]  
}

enum Privacy {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  mediaUrls String[] @default([])
  published Privacy  @default(PUBLIC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  status    RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId Int
  sender   User @relation("SentRequests", fields: [senderId], references: [id])

  receiverId Int
  receiver   User @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation("UserFriends", fields: [userId], references: [id])

  friendId Int
  friend   User @relation("FriendOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}


// --- REFINED CONVERSATION AND MESSAGE MODELS ---

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // group
  groupName      String?
  isGroup   Boolean   @default(false)
  groupImage String?
  groupAdminId Int?


  messages  Message[]
  participants Participant[]
}

enum Role {
  ADMIN
  MEMBER
}

model Participant {
  id             Int          @id @default(autoincrement())

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         Int
  user           User         @relation(fields: [userId], references: [id])

  //new field
  role        Role         @default(MEMBER)

  joinedAt       DateTime     @default(now())
  @@unique([conversationId, userId])
}



model Message {
  id             Int           @id @default(autoincrement())
  text           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  senderId       Int
  sender         User          @relation(fields: [senderId], references: [id])

  conversationId Int
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}



model NotificationEvent {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt 
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String? 
  text   String?

  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt 
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt


  sender_id   Int?
  sender      User?    @relation("sender", fields: [sender_id], references: [id])

  receiver_id Int?
  receiver    User?    @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?
}

