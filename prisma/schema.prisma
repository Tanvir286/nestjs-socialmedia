generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  friends                Friendship[]    @relation("UserFriends")
  friendOf               Friendship[]    @relation("FriendOfUser")

  messages Message[] 
  conversations Conversation[] @relation("ConversationMembers")
}

enum Privacy {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  mediaUrls String[] @default([])
  published Privacy  @default(PUBLIC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  status    RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId Int
  sender   User @relation("SentRequests", fields: [senderId], references: [id])

  receiverId Int
  receiver   User @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation("UserFriends", fields: [userId], references: [id])

  friendId Int
  friend   User @relation("FriendOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}


model Conversation {
  id        Int       @id @default(autoincrement())
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  members User[] @relation("ConversationMembers")
  messages  Message[]
}



model Message {
  id             Int           @id @default(autoincrement())
  text           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  senderId       Int
  sender         User          @relation(fields: [senderId], references: [id])

  conversationId Int
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
}


